#ifndef CARD_H
#define CARD_H

#include <string>

class Card {
  public:
    /******************************
     ** CONSTRUCTOR & DESTRUCTOR **
     ******************************/
    Card();
    Card(int suit, int rank);
    Card(const Card& copy);

    /**************
     ** MUTATORS **
     **************/
    void setSuit(int suit);
    void setRank(int rank);

    /***************
     ** ACCESSORS **
     ***************/
    int getSuit() const;
    int getRank() const;

    /*******************************
     ** CONSTANT MEMBER FUNCTIONS **
     *******************************/
    int getValue() const;   //for blackjack
    std::string getName() const;
    bool isAce() const;

  private:
    int _suit; //1-Spades, 2-Hearts, 3-Clubs, 4-Diamonds
    int _rank; //1-A, 2-2, ..., 13-K
};
/******************************************************************************
 *  Card Class
 *    Object of a playing card, 4 suits and 13 ranks
 ******************************************************************************/


/******************************
 ** CONSTRUCTOR & DESTRUCTOR **
 ******************************/

/******************************************************************************
 *  Card()
 *    Constructor; initialize private member variables
 *    Parameters: none
 *    Return: void
 ******************************************************************************/

/******************************************************************************
 *  Card(int suit, int rank)
 *    Constructor; initialize private member variables with given values
 *    Parameters: int, int
 *    Return: void
 ******************************************************************************/

/******************************************************************************
 *  Card(const Card& copy)
 *    Copy constructor; initialize private member variables with copy's values
 *    Parameters: const Card&
 *    Return: void
 ******************************************************************************/


/**************
 ** MUTATORS **
 **************/

/******************************************************************************
 *  void setSuit(int suit);
 *
 *    Mutator; This method will update the _suit attribute to the parameter
 *      suit value
 * ----------------------------------------------------------------------------
 *    Parameters: int
 * ----------------------------------------------------------------------------
 *    Return: void
 ******************************************************************************/

/******************************************************************************
 *  void setRank(int rank);
 *
 *    Mutator; This method will update the _rank attribute to the parameter
 *      rank value
 * ----------------------------------------------------------------------------
 *    Parameters: int
 * ----------------------------------------------------------------------------
 *    Return: void
 ******************************************************************************/


/***************
 ** ACCESSORS **
 ***************/

/******************************************************************************
 *  int getSuit() const;
 *
 *    Accessor; This method will return _suit
 * ----------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************/

/******************************************************************************
 *  int getRank() const;
 *
 *    Accessor; This method will return _rank
 * ----------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************/


/*******************************
 ** CONSTANT MEMBER FUNCTIONS **
 *******************************/

/******************************************************************************
 *  int getValue() const;
 *
 *    Return value of the card in blackjack,
 *      1-1, ..., 10-10, J-10, Q-10, K-10
 * ----------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------
 *    Return: int
 ******************************************************************************/

/******************************************************************************
 *  std::string getName() const;
 *
 *    Return the name of the card in the form of:
 *      Three of Diamonds, Aces of Spades ...
 * ----------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------
 *    Return: std::string
 ******************************************************************************/

/******************************************************************************
 *  bool isAce() const;
 *
 *    Determine whether or not the card is an Ace
 * ----------------------------------------------------------------------------
 *    Parameters: none
 * ----------------------------------------------------------------------------
 *    Return: bool
 ******************************************************************************/

#endif // CARD_H
